import java.util.*;
public class Main {

	public static void main(String[] args) throws Exception {
		
		Scanner s = new Scanner(System.in);
		
		int n = s.nextInt();
		int[] arr = new int[n];
		
		for(int i = 0;i < n;i++)
		    arr[i] = s.nextInt();
		    
    		Main mainobj = new Main();
    		StacksUsingArrays stack = mainobj.new StacksUsingArrays(1000);
    		System.out.println(hist(arr, stack));
		}
	

	public static long hist(int[] ht, StacksUsingArrays vis) throws Exception {

	    //Write Your Code here
		int[] pse = new int[ht.length];
		pse[0] = -1;
		
		vis.push(0);
		
		for(int curr = 1; curr < ht.length; curr++) {
			while(!vis.isEmpty() && ht[vis.top()] >= ht[curr]) {
				vis.pop();
			}
			
			if(!vis.isEmpty()) {
				pse[curr] = vis.top();
			} else {
				pse[curr] = -1;
			}
			
			vis.push(curr);
		}
		
		//System.out.println(Arrays.toString(pse));
		
		int[] nse = new int[ht.length];
		while(!vis.isEmpty()){
			vis.pop();
		}
		vis.push(0);
		
		for(int curr = 1; curr < ht.length; curr++) {
			while(!vis.isEmpty() && ht[vis.top()] > ht[curr]) {
				nse[vis.pop()] = curr;
			}
			
			vis.push(curr);
		}
		
		while(!vis.isEmpty()) {
			nse[vis.pop()] = ht.length;
		}
		
		//System.out.println(Arrays.toString(nse));
		
		long maxArea = Integer.MIN_VALUE;
		for(int curr = 0; curr < ht.length; curr++) {
			long width = nse[curr] - pse[curr] - 1;
			long area = ht[curr] * width;
			maxArea = Math.max(maxArea, area);
		}
		return maxArea;
	    
	}

	private class StacksUsingArrays {
		private int[] data;
		private int tos;

		public static final int DEFAULT_CAPACITY = 10;

		public StacksUsingArrays() throws Exception {
			// TODO Auto-generated constructor stub
			this(DEFAULT_CAPACITY);
		}

		public StacksUsingArrays(int capacity) throws Exception {
			if (capacity <= 0) {
				System.out.println("Invalid Capacity");
			}
			this.data = new int[capacity];
			this.tos = -1;
		}

		public int size() {
			return this.tos + 1;
		}

		public boolean isEmpty() {
			if (this.size() == 0) {
				return true;
			} else {
				return false;
			}
		}

		public void push(int item) throws Exception {
			if (this.size() == this.data.length) {
				throw new Exception("Stack is Full");
			}
			this.tos++;
			this.data[this.tos] = item;
		}

		public int pop() throws Exception {
			if (this.size() == 0) {
				throw new Exception("Stack is Empty");
			}
			int retVal = this.data[this.tos];
			this.data[this.tos] = 0;
			this.tos--;
			return retVal;
		}

		public int top() throws Exception {
			if (this.size() == 0) {
				throw new Exception("Stack is Empty");
			}
			int retVal = this.data[this.tos];
			return retVal;
		}

		public void display() throws Exception {
			if (this.size() == 0) {
				throw new Exception("Stack is Empty");
			}
			for (int i = this.tos; i >= 0; i--) {
				System.out.println(this.data[i]);
			}

		}

	}

}